name: ci

on:
  # Triggers the workflow on push or pull request on the main or dev branch
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: plant-map-digital-logbook

jobs:
  create-ids:
    runs-on: ubuntu-latest
    outputs:
      image_id: ${{ steps.imageTags.outputs.image_id }}
      version: ${{ steps.imageTags.outputs.version }}

    steps:
      - id: imageTags
        name: Generate tags
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [[ "${{ github.ref }}" != "refs/tags/"* ]] && VERSION=latest

          # Save to output for later steps
          echo "::set-output name=image_id::$IMAGE_ID"
          echo "::set-output name=version::$VERSION"

  # Builds the Docker image if the corresponding files changed
  build-docker:
    needs: create-ids
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 2

      # check if Dockerfile has changed
      - name: Get changed files
        id: changed-files-specific-docker
        uses: tj-actions/changed-files@v8.1
        with:
          files: |
            .devcontainer/Dockerfile

      - name: Set up Docker Buildx
        if: github.ref_type == 'tag' || steps.changed-files-specific-docker.outputs.any_changed == 'true'
        uses: docker/setup-buildx-action@v1

      - name: Login to Container Registry
        if: github.ref_type == 'tag' || steps.changed-files-specific-docker.outputs.any_changed == 'true'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push base image
        if: github.ref_type == 'tag' || steps.changed-files-specific-docker.outputs.any_changed == 'true'
        uses: docker/build-push-action@v2
        with:
          file: .devcontainer/Dockerfile
          push: ${{ GitHub.event_name != 'pull_request'}}
          tags: ${{ needs.create-ids.outputs.image_id }}:${{ needs.create-ids.outputs.version }}
          cache-from: type=registry,ref=${{ needs.create-ids.outputs.image_id }}:${{ needs.create-ids.outputs.version }}
          cache-to: type=inline

  # Builds the code
  build-code:
    needs: [build-docker, create-ids]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github_actions
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    container:
      image: ${{ needs.create-ids.outputs.image_id }}:${{ needs.create-ids.outputs.version }}
      options: --user docker --workdir /PlantMap

    steps:
      - uses: actions/checkout@v2

      # Run migrations
      - name: Run migrations
        run: |
          cd django
          python3 manage.py migrate

      # Build vue frontend
      - name: Build vue
        run: |
          cd vue
          npm ci
          npm run build
        shell: bash

      # Build python classes from protobuf files
      - name: Build the proto files
        run: |
          mkdir -p build/gRPC
          python3 -m grpc_tools.protoc -I=protobuf-msgs --python_out=build/gRPC --grpc_python_out=build/gRPC protobuf-msgs/*
        shell: bash

      # Run pre-commit checks
      - name: run pre-commit tests
        run: |
          pre-commit run -a
        shell: bash
